{"version":3,"file":"utils.js","sources":["../../src/constants.ts","../../src/workers/utils.ts"],"sourcesContent":["export const ApiUrls = {\n  local: \"http://localhost:5555\",\n  dev: \"https://dev.xmtp.network\",\n  production: \"https://production.xmtp.network\",\n} as const;\n\nexport const HistorySyncUrls = {\n  local: \"http://localhost:5558\",\n  dev: \"https://message-history.dev.ephemera.network\",\n  production: \"https://message-history.production.ephemera.network\",\n} as const;\n","import init, {\n  generateInboxId as generate_inbox_id,\n  getInboxIdForAddress as get_inbox_id_for_address,\n} from \"@xmtp/wasm-bindings\";\nimport { ApiUrls } from \"@/constants\";\nimport type {\n  UtilsEventsActions,\n  UtilsEventsClientMessageData,\n  UtilsEventsErrorData,\n  UtilsEventsWorkerPostMessageData,\n  XmtpEnv,\n} from \"@/types\";\n\n/**\n * Type-safe postMessage\n */\nconst postMessage = <A extends UtilsEventsActions>(\n  data: UtilsEventsWorkerPostMessageData<A>,\n) => {\n  self.postMessage(data);\n};\n\n/**\n * Type-safe postMessage for errors\n */\nconst postMessageError = (data: UtilsEventsErrorData) => {\n  self.postMessage(data);\n};\n\nexport const generateInboxId = async (address: string) => {\n  await init();\n  return generate_inbox_id(address);\n};\n\nexport const getInboxIdForAddress = async (address: string, env?: XmtpEnv) => {\n  await init();\n  const host = env ? ApiUrls[env] : ApiUrls.dev;\n  return get_inbox_id_for_address(host, address);\n};\n\nself.onmessage = async (event: MessageEvent<UtilsEventsClientMessageData>) => {\n  const { action, id, data } = event.data;\n  if (data.enableLogging) {\n    console.log(\"utils worker received event data\", event.data);\n  }\n\n  try {\n    switch (action) {\n      case \"generateInboxId\":\n        postMessage({\n          id,\n          action,\n          result: await generateInboxId(data.address),\n        });\n        break;\n      case \"getInboxIdForAddress\":\n        postMessage({\n          id,\n          action,\n          result: await getInboxIdForAddress(data.address, data.env),\n        });\n        break;\n      // no default\n    }\n  } catch (e) {\n    postMessageError({\n      id,\n      action,\n      error: (e as Error).message,\n    });\n  }\n};\n"],"names":["ApiUrls","local","dev","production","postMessage","data","self","generateInboxId","async","address","init","generate_inbox_id","getInboxIdForAddress","env","get_inbox_id_for_address","onmessage","event","action","id","enableLogging","console","log","result","e","postMessageError","error","message"],"mappings":"mFAAO,MAAMA,EAAU,CACrBC,MAAO,wBACPC,IAAK,2BACLC,WAAY,mCCaRC,EACJC,IAEAC,KAAKF,YAAYC,EAAK,EAUXE,EAAkBC,MAAOC,UAC9BC,IACCC,EAAkBF,IAGdG,EAAuBJ,MAAOC,EAAiBI,WACpDH,IAEN,OAAOI,EADMD,EAAMb,EAAQa,GAAOb,EAAQE,IACJO,EAAQ,EAGhDH,KAAKS,UAAYP,MAAOQ,IACtB,MAAMC,OAAEA,EAAMC,GAAEA,EAAEb,KAAEA,GAASW,EAAMX,KAC/BA,EAAKc,eACPC,QAAQC,IAAI,mCAAoCL,EAAMX,MAGxD,IACE,OAAQY,GACN,IAAK,kBACHb,EAAY,CACVc,KACAD,SACAK,aAAcf,EAAgBF,EAAKI,WAErC,MACF,IAAK,uBACHL,EAAY,CACVc,KACAD,SACAK,aAAcV,EAAqBP,EAAKI,QAASJ,EAAKQ,QAK5D,MAAOU,GAvCc,CAAClB,IACxBC,KAAKF,YAAYC,EAAK,EAuCpBmB,CAAiB,CACfN,KACAD,SACAQ,MAAQF,EAAYG"}